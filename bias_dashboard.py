import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# ---------------------------
# CONFIGURA√á√ÉO INICIAL
# ---------------------------

st.set_page_config(
    page_title="Simulador de Vi√©s em Recomenda√ß√£o",
    layout="centered",
    initial_sidebar_state="expanded"
)

st.title("ü§ñ Simulador de Vi√©s em Sistemas de Recomenda√ß√£o")
st.markdown("""
Este simulador interativo demonstra como **vi√©ses nos dados** ‚Äî como popularidade, g√™nero ou classe social ‚Äî  
podem afetar os resultados em **sistemas de recomenda√ß√£o algor√≠tmica**.

üìå **Como funciona:**  
- √Ä esquerda, selecione o tipo de vi√©s que deseja aplicar.  
- Observe como os scores mudam com a aplica√ß√£o desse vi√©s.  
- Compare os gr√°ficos lado a lado para entender o impacto.

üîé Os dados s√£o simulados apenas para fins educacionais.
""")

# ---------------------------
# SIMULA√á√ÉO DOS DADOS BASE
# ---------------------------

np.random.seed(42)
itens = [f"Item {i}" for i in range(1, 11)]
scores_originais = np.random.uniform(2, 5, size=10)

df_base = pd.DataFrame({
    "Item": itens,
    "Score Original (sem vi√©s)": scores_originais
})

# ---------------------------
# INTERFACE DO USU√ÅRIO
# ---------------------------

st.sidebar.header("‚öôÔ∏è Escolha um tipo de vi√©s")
tipo_vies = st.sidebar.selectbox("Tipo de vi√©s para simular:", ["Nenhum", "Popularidade", "G√™nero", "Classe"])

# ---------------------------
# APLICA√á√ÉO DO VI√âS
# ---------------------------

df_simulado = df_base.copy()

if tipo_vies == "Popularidade":
    st.sidebar.markdown("üìà Este vi√©s favorece os itens mais populares.")
    popularidade = np.linspace(1.5, 0.5, 10)  # decrescente
    df_simulado["Score com Vi√©s"] = df_base["Score Original (sem vi√©s)"] * popularidade

elif tipo_vies == "G√™nero":
    st.sidebar.markdown("üöª Este vi√©s favorece itens associados a um determinado g√™nero.")
    generos = ['Feminino', 'Masculino'] * 5
    df_simulado["G√™nero"] = generos
    df_simulado["Score com Vi√©s"] = np.where(
        df_simulado["G√™nero"] == 'Feminino',
        df_base["Score Original (sem vi√©s)"] * 1.2,
        df_base["Score Original (sem vi√©s)"] * 0.8
    )

elif tipo_vies == "Classe":
    st.sidebar.markdown("üí∏ Este vi√©s favorece itens consumidos por pessoas de classe mais alta.")
    classe = ['Alta'] * 5 + ['Baixa'] * 5
    df_simulado["Classe"] = classe
    df_simulado["Score com Vi√©s"] = np.where(
        df_simulado["Classe"] == 'Alta',
        df_base["Score Original (sem vi√©s)"] * 1.3,
        df_base["Score Original (sem vi√©s)"] * 0.7
    )

else:
    df_simulado["Score com Vi√©s"] = df_base["Score Original (sem vi√©s)"]

# ---------------------------
# VISUALIZA√á√ÉO COMPARATIVA
# ---------------------------

st.markdown("### üìä Compara√ß√£o dos Scores")

col1, col2 = st.columns(2)

with col1:
    st.markdown("**üîπ Sem vi√©s**")
    fig1, ax1 = plt.subplots()
    ax1.bar(df_base["Item"], df_base["Score Original (sem vi√©s)"], color='#4da6ff')
    ax1.set_ylim(0, max(df_simulado["Score com Vi√©s"]) * 1.2)
    ax1.set_ylabel("Score")
    st.pyplot(fig1)

with col2:
    st.markdown(f"**üî∏ Com vi√©s: {tipo_vies}**")
    fig2, ax2 = plt.subplots()
    ax2.bar(df_simulado["Item"], df_simulado["Score com Vi√©s"], color='#ff6666')
    ax2.set_ylim(0, max(df_simulado["Score com Vi√©s"]) * 1.2)
    ax2.set_ylabel("Score")
    st.pyplot(fig2)

# ---------------------------
# TABELA DE DADOS
# ---------------------------

with st.expander("üìã Ver tabela de dados"):
    st.dataframe(df_simulado)

# ---------------------------
# RODAP√â
# ---------------------------

st.markdown("---")
st.markdown("""
üìå Este simulador √© uma ferramenta educativa criada para demonstrar como **dados enviesados podem alterar resultados algor√≠tmicos**.  
Todos os dados s√£o fict√≠cios e gerados aleatoriamente com prop√≥sitos did√°ticos.

Feito com ‚ù§Ô∏è por [Larissa Dias](https://github.com/larifgdias)
""")
